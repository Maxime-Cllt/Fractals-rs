name: "Build & Release Workflow"

permissions:
  contents: write

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: "Version: (e.g. -> v2024.12.25)"
      publish:
        type: boolean
        description: "Publish release"
      overwrite_tag:
        type: boolean
        description: "Overwrite tag if it exists"
  workflow_call:
    inputs:
      version:
        type: string
        description: "Version: (e.g. -> v2024.12.25)"
      publish:
        type: boolean
      overwrite_tag:
        type: boolean

jobs:
  validate-input:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate input
        id: regex-match
        run: |
          if [[ "${{ github.event.inputs.version }}" =~ ^v[0-9]{4}\.[0-9]{2}\.[0-9]{2}$ ]] || [[ "${{ github.event_name }}" == "push" ]]; then
            echo "match=true" >> "$GITHUB_OUTPUT";
          else
            echo "match=false" >> "$GITHUB_OUTPUT";
          fi

  get-version:
    needs: validate-input
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Install jql
        if: ${{ !inputs.version }}
        uses: taiki-e/install-action@v2
        with:
          tool: jql

      - name: Get date-based version for push builds
        id: date_version
        if: ${{ github.event_name == 'push' }}
        run: |
          # Get current date in yyyy.mm.dd format
          current_date=$(date +"%Y.%m.%d")
          base_tag="v${current_date}"
          echo "Base tag: $base_tag"
          
          # Check if tag already exists and find the highest increment
          existing_tags=$(git tag -l "${base_tag}*" | sort -V)
          
          if [ -z "$existing_tags" ]; then
            # No existing tag for today, use base tag
            new_tag="$base_tag"
            new_increment=0
          else
            # Find the highest increment for today
            highest_increment=$(echo "$existing_tags" | sed "s/${base_tag}//" | sed 's/^-//' | grep -E '^[0-9]+$' | sort -n | tail -n1)
          
            if [ -z "$highest_increment" ]; then
              # Base tag exists but no increments
              new_increment=1
            else
              new_increment=$((highest_increment + 1))
            fi
          
            new_tag="${base_tag}-${new_increment}"
          fi
          
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
          
          # Extract version without 'v' prefix for crate version
          crate_version=$(echo $new_tag | sed 's/^v//')
          echo "Crate version: $crate_version"
          echo "crate_version=$crate_version" >> "$GITHUB_OUTPUT"

      - name: Get manual version or generate date version
        id: manual_or_date_version
        if: ${{ github.event_name != 'push' }}
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            # Use provided version
            tag="${{ inputs.version }}"
            echo "Using provided version: $tag"
          else
            # Generate date-based version
            current_date=$(date +"%Y.%m.%d")
            tag="v${current_date}"
            echo "Generated date version: $tag"
          fi
          
          echo "tag_version=$tag" >> "$GITHUB_OUTPUT"
          
          # Extract version without 'v' prefix for crate version
          crate_version=$(echo $tag | sed 's/^v//')
          echo "Crate version: $crate_version"
          echo "crate_version=$crate_version" >> "$GITHUB_OUTPUT"

      - name: Update Cargo.toml version
        if: ${{ github.event_name != 'push' }}
        run: |
          version="${{ steps.manual_or_date_version.outputs.crate_version }}"
          # Update version in Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$version\"/" Cargo.toml
          echo "Updated Cargo.toml version to: $version"

    outputs:
      new_tag_version: ${{ steps.date_version.outputs.new_tag || steps.manual_or_date_version.outputs.tag_version }}
      new_crate_version: ${{ steps.date_version.outputs.crate_version || steps.manual_or_date_version.outputs.crate_version }}

  create-tag:
    needs: [ get-version ]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - run: git pull

      - uses: mukunku/tag-exists-action@v1.6.0
        if: ${{ inputs.overwrite_tag }}
        id: check-tag-overwrite
        with:
          tag: ${{  needs.get-version.outputs.new_tag_version }}

      - name: Delete tag
        if: ${{ steps.check-tag-overwrite.outputs.exists == 'true' }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git fetch --tags
          git tag -d ${{ needs.get-version.outputs.new_tag_version }}
          git push -d origin ${{  needs.get-version.outputs.new_tag_version }}

      - uses: mukunku/tag-exists-action@v1.6.0
        id: check-tag
        with:
          tag: ${{ needs.get-version.outputs.new_tag_version}}

      - name: Create tag
        if: steps.check-tag.outputs.exists == 'false'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ needs.get-version.outputs.new_tag_version}}
          git push origin ${{  needs.get-version.outputs.new_tag_version}}

  create-release:
    needs: [ get-version, create-tag ]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4

      - uses: taiki-e/create-gh-release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          changelog: CHANGELOG.md
          allow-missing-changelog: true
          ref: refs/tags/${{ needs.get-version.outputs.new_tag_version }}
          prerelease: false

  build-and-upload:
    needs: [ get-version, create-tag ]
    name: Build & Release for ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, cross: false }

#          - { os: windows-latest, target: x86_64-pc-windows-msvc, cross: false }
#          - { os: windows-latest, target: aarch64-pc-windows-msvc, cross: false }
#
#          - { os: macos-latest, target: x86_64-apple-darwin, cross: false }
#          - { os: macos-latest, target: aarch64-apple-darwin, cross: false }
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.get-version.outputs.new_tag_version }}

      - name: Install OpenSSL (Linux & macOS)
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev
          # Set the proper directories for OpenSSL on Ubuntu
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include/openssl" >> $GITHUB_ENV

      - name: Install OpenSSL (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          choco install openssl

      - name: Install stable Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Install cross-compilation tools (if needed)
        if: ${{ matrix.cross }}
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - name: Build the binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Rename binary (Linux & macOS)
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          mv target/${{ matrix.target }}/release/Fractals-rs target/${{ matrix.target }}/release/Fractals-rs-${{ matrix.target }}

      - name: Rename binary (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          mv target/${{ matrix.target }}/release/Fractals-rs.exe target/${{ matrix.target }}/release/Fractals-rs-${{ matrix.target }}.exe

      - name: Upload release binary (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: Fractals-rs-${{ matrix.target }}.exe
          path: target/${{ matrix.target }}/release/Fractals-rs-${{ matrix.target }}.exe
          compression-level: '9'

      - name: Upload release binary (Linux & macOS)
        if: ${{ matrix.os != 'windows-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: Fractals-rs-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/Fractals-rs-${{ matrix.target }}
          compression-level: '9'

  upload-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [ build-and-upload , get-version ]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get-version.outputs.new_tag_version }}
          name: ${{ needs.get-version.outputs.new_tag_version }}
          draft: false
          prerelease: false
          files: artifacts/**/*
          token: ${{ secrets.GITHUB_TOKEN }}